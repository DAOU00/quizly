type Question @aws_iam @aws_api_key {
  id: ID!
  text: String
  choices: [String]
  answer: String
  Category: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelQuestionConnection @aws_api_key @aws_iam {
  items: [Question]!
  nextToken: String
}

input ModelQuestionFilterInput {
  id: ModelIDInput
  text: ModelStringInput
  choices: ModelStringInput
  answer: ModelStringInput
  Category: ModelStringInput
  and: [ModelQuestionFilterInput]
  or: [ModelQuestionFilterInput]
  not: ModelQuestionFilterInput
}

type Query {
  getQuestion(id: ID!): Question @aws_api_key @aws_iam
  listQuestions(filter: ModelQuestionFilterInput, limit: Int, nextToken: String): ModelQuestionConnection @aws_api_key @aws_iam
}

input ModelQuestionConditionInput {
  text: ModelStringInput
  choices: ModelStringInput
  answer: ModelStringInput
  Category: ModelStringInput
  and: [ModelQuestionConditionInput]
  or: [ModelQuestionConditionInput]
  not: ModelQuestionConditionInput
}

input CreateQuestionInput {
  id: ID
  text: String
  choices: [String]
  answer: String
  Category: String
}

input UpdateQuestionInput {
  id: ID!
  text: String
  choices: [String]
  answer: String
  Category: String
}

input DeleteQuestionInput {
  id: ID!
}

type Mutation {
  createQuestion(input: CreateQuestionInput!, condition: ModelQuestionConditionInput): Question @aws_api_key @aws_iam
  updateQuestion(input: UpdateQuestionInput!, condition: ModelQuestionConditionInput): Question @aws_api_key @aws_iam
  deleteQuestion(input: DeleteQuestionInput!, condition: ModelQuestionConditionInput): Question @aws_api_key @aws_iam
}

input ModelSubscriptionQuestionFilterInput {
  id: ModelSubscriptionIDInput
  text: ModelSubscriptionStringInput
  choices: ModelSubscriptionStringInput
  answer: ModelSubscriptionStringInput
  Category: ModelSubscriptionStringInput
  and: [ModelSubscriptionQuestionFilterInput]
  or: [ModelSubscriptionQuestionFilterInput]
}

type Subscription {
  onCreateQuestion(filter: ModelSubscriptionQuestionFilterInput): Question @aws_subscribe(mutations: ["createQuestion"]) @aws_api_key @aws_iam
  onUpdateQuestion(filter: ModelSubscriptionQuestionFilterInput): Question @aws_subscribe(mutations: ["updateQuestion"]) @aws_api_key @aws_iam
  onDeleteQuestion(filter: ModelSubscriptionQuestionFilterInput): Question @aws_subscribe(mutations: ["deleteQuestion"]) @aws_api_key @aws_iam
}
